<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()">

<!-- creationComplete="init()" -->

    <mx:Style>
      @font-face
      {
		font-family: DefaultFont;
        src: url("../../fonts/TIMES.TTF");
      }
      .defaultBoldStyle {
        font-family: DefaultFont;
        font-weight: bold;
      } 
    </mx:Style>

    <mx:Script><![CDATA[

	import multigraph.Graph;
	import multigraph.renderer.RendererList;
    import flash.external.ExternalInterface;

    import mx.core.Container;
	import mx.containers.Panel;
	import mx.managers.PopUpManager;

	import mx.controls.Alert;

	private var _swfname:String;

    [Bindable]
    public var test:String = "";

    [Bindable]
    public var rendererlist:String = "";

    [Bindable]
    public var swfname:String = "";

    [Bindable]
    public var hostname:String = "";

    [Bindable]
    public var pathname:String = "";

    [Bindable]
    public var port:String = "";

    [Bindable]
    public var muglfile:String = "";

    public static function create(muglfile:String):Multigraph {
 	   var m:Multigraph = new Multigraph();
	   m.muglfile = muglfile;
       m.init();
       return m;
    }

	public function init():void {
		if (test=="true") {
		} else if (rendererlist=="true") {
			new RendererList();
		} else {
			this._swfname = swfname;
  			var loader:URLLoader = new URLLoader();
    		loader.dataFormat = "text";
    		loader.addEventListener( Event.COMPLETE, 
				function(event:Event):void {
                    createGraphs(event.target.data, 
                                 swfname, hostname, pathname, port);
				}
			);
    		loader.load( new URLRequest( muglfile ) ); 
		}
//		stage.scaleMode = StageScaleMode.NO_SCALE;
//    	stage.align = StageAlign.TOP_LEFT;
	}


    private function createGraphs(xmlText:String, 
                                  swfname:String, hostname:String, pathname:String, port:String):void {
      var graph:Graph;
      try {

        // Get the xml object for the the mugl file
		var xml:XML = new XML( xmlText );

        // If there is no <graph> element in the mugl file, create a single Graph.
        if (xml.graph == null || xml.graph.length() == 0) {

          // Check to see if there are "width"/"height" attributes
          // on a <window> tag in the mugl file, and if so, use those
          // as the width and height of the graph.
          var graphWidth:int=-1; var graphHeight:int=-1;
          if (xml.window != null && xml.window[0] != null) {
            if (xml.window[0].@width != null) {
              graphWidth = int(xml.window[0].@width);
            }
            if (xml.window[0].@height != null) {
              graphHeight = int(xml.window[0].@height);
            }
          }

          // If the width/height weren't set in the mugl file, use the
          // width and height given as mxml properties, unless those properties
          // weren't given, in which case we use the width/height of the stage
          if (graphWidth<=0) {
             if (this.width > 0) {
                graphWidth = this.width;
             } else {
                graphWidth = stage.width;
             }
          }
          if (graphHeight<=0) {
             if (this.height > 0) {
                graphHeight = this.height;
             } else {
                graphHeight = stage.height;
             }
          }

          graph = new Graph(xml, swfname, hostname, pathname, port, graphWidth, graphHeight);
          multigraphContainer.addChild(graph);

        // There is at least one <graph> element in the mugl file, so loop over each one,
        // creating a graph with the given size and position for each one.
        } else {
          for (var i:int = 0; i<xml.graph.length(); ++i) {
            graph = new Graph(xml.graph[i],
                              swfname, hostname, pathname, port,
                              xml.graph[i]['@width'], xml.graph[i]['@height']
                              );
            graph.x = xml.graph[i]['@x'];
            graph.y = xml.graph[i]['@y'];
            multigraphContainer.addChild(graph);
          }
        }
      } catch (e:TypeError) {
        ///app.displayMessage("problem with XML file!!!");
        trace("Could not parse text into XML");
        trace(e.message);
      }    
    }

    public static function createPopUp(mugl:String, width:int, height:int, title:String, parent:DisplayObject, modal:Boolean=false) {
        var titleWindow:ClosableTitleWindow = new ClosableTitleWindow();
        titleWindow.title = title;

        var mGraph:Multigraph = new Multigraph();
        mGraph.muglfile = mugl;
		mGraph.width  = width;
		mGraph.height = height;

        titleWindow.addChild(mGraph);
        PopUpManager.addPopUp(titleWindow, parent, modal);
   }

  ]]></mx:Script>
	
	<mx:Canvas id="multigraphContainer">
	</mx:Canvas>
</mx:VBox>
